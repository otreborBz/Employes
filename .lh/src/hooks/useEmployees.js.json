{
    "sourceFile": "src/hooks/useEmployees.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1760907363671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760907416970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n   // 游댳 Adiciona funcion치rio\n   const addFuncionario = useCallback(async (novoFuncionario) => {\n     try {\n       await dbAddFuncionario(novoFuncionario);\n-      await loadFuncionarios(); // recarrega a lista\n+      await loadFuncionarios();\n     } catch (err) {\n       console.error('Erro ao adicionar funcion치rio:', err);\n       setError(err.message);\n     }\n"
                }
            ],
            "date": 1760907363671,
            "name": "Commit-0",
            "content": "import { useEffect, useState, useCallback } from 'react';\nimport {\n  createTable,\n  getFuncionarios,\n  addFuncionario as dbAddFuncionario,\n  updateFuncionario as dbUpdateFuncionario,\n  deleteFuncionario as dbDeleteFuncionario,\n  clearFuncionarios as dbClearFuncionarios,\n} from '@/sqLite/SQLiteConecction';\n\nexport default function useFuncionarios() {\n  const [funcionarios, setFuncionarios] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // 游댳 Cria tabela e carrega dados na inicializa칞칚o\n  const loadFuncionarios = useCallback(async () => {\n    try {\n      setLoading(true);\n      await createTable();\n      const data = await getFuncionarios();\n      setFuncionarios(data);\n      setError(null);\n    } catch (err) {\n      console.error('Erro ao carregar funcion치rios:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // 游댳 Adiciona funcion치rio\n  const addFuncionario = useCallback(async (novoFuncionario) => {\n    try {\n      await dbAddFuncionario(novoFuncionario);\n      await loadFuncionarios(); // recarrega a lista\n    } catch (err) {\n      console.error('Erro ao adicionar funcion치rio:', err);\n      setError(err.message);\n    }\n  }, [loadFuncionarios]);\n\n  // 游댳 Atualiza funcion치rio\n  const updateFuncionario = useCallback(async (funcionarioAtualizado) => {\n    try {\n      await dbUpdateFuncionario(funcionarioAtualizado);\n      await loadFuncionarios();\n    } catch (err) {\n      console.error('Erro ao atualizar funcion치rio:', err);\n      setError(err.message);\n    }\n  }, [loadFuncionarios]);\n\n  // 游댳 Exclui funcion치rio\n  const deleteFuncionario = useCallback(async (id) => {\n    try {\n      await dbDeleteFuncionario(id);\n      await loadFuncionarios();\n    } catch (err) {\n      console.error('Erro ao excluir funcion치rio:', err);\n      setError(err.message);\n    }\n  }, [loadFuncionarios]);\n\n  // 游댳 Limpa tabela\n  const clearAll = useCallback(async () => {\n    try {\n      await dbClearFuncionarios();\n      setFuncionarios([]);\n    } catch (err) {\n      console.error('Erro ao limpar tabela:', err);\n      setError(err.message);\n    }\n  }, []);\n\n  // 游댳 Carrega na montagem\n  useEffect(() => {\n    loadFuncionarios();\n  }, [loadFuncionarios]);\n\n  return {\n    funcionarios,\n    loading,\n    error,\n    loadFuncionarios,\n    addFuncionario,\n    updateFuncionario,\n    deleteFuncionario,\n    clearAll,\n  };\n}\n"
        }
    ]
}