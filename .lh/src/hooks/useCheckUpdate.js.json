{
    "sourceFile": "src/hooks/useCheckUpdate.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1760653830024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760653986778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { Alert, Linking } from 'react-native';\n import Constants from 'expo-constants';\n \n export default function useCheckUpdate() {\n+  \n   useEffect(() => {\n     async function checkForUpdate() {\n       try {\n         const response = await fetch('https://seusite.com/update.json'); // üîó seu link real\n"
                },
                {
                    "date": 1760654854387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,13 +3,13 @@\n import { Alert, Linking } from 'react-native';\n import Constants from 'expo-constants';\n \n export default function useCheckUpdate() {\n-  \n+\n   useEffect(() => {\n     async function checkForUpdate() {\n       try {\n-        const response = await fetch('https://seusite.com/update.json'); // üîó seu link real\n+        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json'); // üîó seu link real\n         const data = await response.json();\n \n         const localVersion = Constants.expoConfig.version;\n         const remoteVersion = data.version;\n"
                },
                {
                    "date": 1760655040107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n-// src/hooks/useCheckUpdate.js\n-import { useEffect } from 'react';\n-import { Alert, Linking } from 'react-native';\n+import { useEffect, useState } from 'react';\n import Constants from 'expo-constants';\n+import UpdateModal from '@/components/UpdateModal';\n \n export default function useCheckUpdate() {\n+  const [updateInfo, setUpdateInfo] = useState(null);\n \n   useEffect(() => {\n     async function checkForUpdate() {\n       try {\n@@ -14,27 +14,35 @@\n         const localVersion = Constants.expoConfig.version;\n         const remoteVersion = data.version;\n \n         if (isNewerVersion(remoteVersion, localVersion)) {\n-          Alert.alert(\n-            'Nova vers√£o dispon√≠vel üöÄ',\n-            `${data.changelog}\\n\\nVers√£o: ${remoteVersion}`,\n-            [\n-              { text: 'Mais tarde', style: 'cancel' },\n-              { text: 'Baixar agora', onPress: () => Linking.openURL(data.apkUrl) },\n-            ]\n-          );\n+          setUpdateInfo({\n+            changelog: data.changelog,\n+            version: remoteVersion,\n+            apkUrl: data.apkUrl,\n+          });\n         }\n       } catch (error) {\n         console.log('Erro ao verificar atualiza√ß√£o:', error);\n       }\n     }\n \n     checkForUpdate();\n   }, []);\n+\n+  return (\n+    updateInfo && (\n+      <UpdateModal\n+        visible={true}\n+        changelog={updateInfo.changelog}\n+        version={updateInfo.version}\n+        apkUrl={updateInfo.apkUrl}\n+        onClose={() => setUpdateInfo(null)}\n+      />\n+    )\n+  );\n }\n \n-// üîß Compara as vers√µes (ex: 1.1.0 > 1.0.0)\n function isNewerVersion(remote, local) {\n   const r = remote.split('.').map(Number);\n   const l = local.split('.').map(Number);\n   for (let i = 0; i < r.length; i++) {\n"
                },
                {
                    "date": 1760655206544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n import { useEffect, useState } from 'react';\n import Constants from 'expo-constants';\n-import UpdateModal from '@/components/UpdateModal';\n+import UpdateModal from '@/components/';\n \n export default function useCheckUpdate() {\n   const [updateInfo, setUpdateInfo] = useState(null);\n \n   useEffect(() => {\n     async function checkForUpdate() {\n       try {\n-        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json'); // üîó seu link real\n+        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n         const data = await response.json();\n \n         const localVersion = Constants.expoConfig.version;\n         const remoteVersion = data.version;\n"
                },
                {
                    "date": 1760655212568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+import { useEffect, useState } from 'react';\n+import Constants from 'expo-constants';\n+import UpdateModal from '@/components/updateModal/UpdateModal';\n+\n+export default function useCheckUpdate() {\n+  const [updateInfo, setUpdateInfo] = useState(null);\n+\n+  useEffect(() => {\n+    async function checkForUpdate() {\n+      try {\n+        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n+        const data = await response.json();\n+\n+        const localVersion = Constants.expoConfig.version;\n+        const remoteVersion = data.version;\n+\n+        if (isNewerVersion(remoteVersion, localVersion)) {\n+          setUpdateInfo({\n+            changelog: data.changelog,\n+            version: remoteVersion,\n+            apkUrl: data.apkUrl,\n+          });\n+        }\n+      } catch (error) {\n+        console.log('Erro ao verificar atualiza√ß√£o:', error);\n+      }\n+    }\n+\n+    checkForUpdate();\n+  }, []);\n+\n+  return (\n+    updateInfo && (\n+      <UpdateModal\n+        visible={true}\n+        changelog={updateInfo.changelog}\n+        version={updateInfo.version}\n+        apkUrl={updateInfo.apkUrl}\n+        onClose={() => setUpdateInfo(null)}\n+      />\n+    )\n+  );\n+}\n+\n+function isNewerVersion(remote, local) {\n+  const r = remote.split('.').map(Number);\n+  const l = local.split('.').map(Number);\n+  for (let i = 0; i < r.length; i++) {\n+    if (r[i] > (l[i] || 0)) return true;\n+    if (r[i] < (l[i] || 0)) return false;\n+  }\n+  return false;\n+}\n"
                },
                {
                    "date": 1760655510540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,54 @@\n+import { useEffect, useState } from 'react';\n+import Constants from 'expo-constants';\n+import UpdateModal from '@/components/updateModal/UpdateModal';\n+\n+export default function useCheckUpdate() {\n+  const [updateInfo, setUpdateInfo] = useState(null);\n+\n+  useEffect(() => {\n+    async function checkForUpdate() {\n+      try {\n+        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n+        const data = await response.json();\n+\n+        const localVersion = Constants.expoConfig.version;\n+        console\n+        const remoteVersion = data.version;\n+\n+        if (isNewerVersion(remoteVersion, localVersion)) {\n+          setUpdateInfo({\n+            changelog: data.changelog,\n+            version: remoteVersion,\n+            apkUrl: data.apkUrl,\n+          });\n+        }\n+      } catch (error) {\n+        console.log('Erro ao verificar atualiza√ß√£o:', error);\n+      }\n+    }\n+\n+    checkForUpdate();\n+  }, []);\n+\n+  return (\n+    updateInfo && (\n+      <UpdateModal\n+        visible={true}\n+        changelog={updateInfo.changelog}\n+        version={updateInfo.version}\n+        apkUrl={updateInfo.apkUrl}\n+        onClose={() => setUpdateInfo(null)}\n+      />\n+    )\n+  );\n+}\n+\n+function isNewerVersion(remote, local) {\n+  const r = remote.split('.').map(Number);\n+  const l = local.split('.').map(Number);\n+  for (let i = 0; i < r.length; i++) {\n+    if (r[i] > (l[i] || 0)) return true;\n+    if (r[i] < (l[i] || 0)) return false;\n+  }\n+  return false;\n+}\n"
                },
                {
                    "date": 1760655515588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,54 @@\n+import { useEffect, useState } from 'react';\n+import Constants from 'expo-constants';\n+import UpdateModal from '@/components/updateModal/UpdateModal';\n+\n+export default function useCheckUpdate() {\n+  const [updateInfo, setUpdateInfo] = useState(null);\n+\n+  useEffect(() => {\n+    async function checkForUpdate() {\n+      try {\n+        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n+        const data = await response.json();\n+\n+        const localVersion = Constants.expoConfig.version;\n+        console.log\n+        const remoteVersion = data.version;\n+\n+        if (isNewerVersion(remoteVersion, localVersion)) {\n+          setUpdateInfo({\n+            changelog: data.changelog,\n+            version: remoteVersion,\n+            apkUrl: data.apkUrl,\n+          });\n+        }\n+      } catch (error) {\n+        console.log('Erro ao verificar atualiza√ß√£o:', error);\n+      }\n+    }\n+\n+    checkForUpdate();\n+  }, []);\n+\n+  return (\n+    updateInfo && (\n+      <UpdateModal\n+        visible={true}\n+        changelog={updateInfo.changelog}\n+        version={updateInfo.version}\n+        apkUrl={updateInfo.apkUrl}\n+        onClose={() => setUpdateInfo(null)}\n+      />\n+    )\n+  );\n+}\n+\n+function isNewerVersion(remote, local) {\n+  const r = remote.split('.').map(Number);\n+  const l = local.split('.').map(Number);\n+  for (let i = 0; i < r.length; i++) {\n+    if (r[i] > (l[i] || 0)) return true;\n+    if (r[i] < (l[i] || 0)) return false;\n+  }\n+  return false;\n+}\n"
                },
                {
                    "date": 1760655816783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,56 @@\n+import { useEffect, useState } from 'react';\n+import \n+import UpdateModal from '@/components/updateModal/UpdateModal';\n+\n+export default function useCheckUpdate() {\n+  const [updateInfo, setUpdateInfo] = useState(null);\n+\n+  useEffect(() => {\n+    async function checkForUpdate() {\n+      try {\n+        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n+        const data = await response.json();\n+\n+        const localVersion = Constants.expoConfig.version;\n+        console.log('Vers√£o local:', localVersion);\n+        console.log('Vers√£o remota:', data.version);\n+\n+        const remoteVersion = data.version;\n+\n+        if (isNewerVersion(remoteVersion, localVersion)) {\n+          setUpdateInfo({\n+            changelog: data.changelog,\n+            version: remoteVersion,\n+            apkUrl: data.apkUrl,\n+          });\n+        }\n+      } catch (error) {\n+        console.log('Erro ao verificar atualiza√ß√£o:', error);\n+      }\n+    }\n+\n+    checkForUpdate();\n+  }, []);\n+\n+  return (\n+    updateInfo && (\n+      <UpdateModal\n+        visible={true}\n+        changelog={updateInfo.changelog}\n+        version={updateInfo.version}\n+        apkUrl={updateInfo.apkUrl}\n+        onClose={() => setUpdateInfo(null)}\n+      />\n+    )\n+  );\n+}\n+\n+function isNewerVersion(remote, local) {\n+  const r = remote.split('.').map(Number);\n+  const l = local.split('.').map(Number);\n+  for (let i = 0; i < r.length; i++) {\n+    if (r[i] > (l[i] || 0)) return true;\n+    if (r[i] < (l[i] || 0)) return false;\n+  }\n+  return false;\n+}\n"
                },
                {
                    "date": 1760655857014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,56 @@\n+import { useEffect, useState } from 'react';\n+import Constants from 'expo-constants';\n+import UpdateModal from '@/components/updateModal/UpdateModal';\n+\n+export default function useCheckUpdate() {\n+  const [updateInfo, setUpdateInfo] = useState(null);\n+\n+  useEffect(() => {\n+    async function checkForUpdate() {\n+      try {\n+        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n+        const data = await response.json();\n+\n+        const localVersion = Constants.expoConfig.version;\n+        console.log('Vers√£o local:', localVersion);\n+        console.log('Vers√£o remota:', data.);\n+\n+        const remoteVersion = data.version;\n+\n+        if (isNewerVersion(remoteVersion, localVersion)) {\n+          setUpdateInfo({\n+            changelog: data.changelog,\n+            version: remoteVersion,\n+            apkUrl: data.apkUrl,\n+          });\n+        }\n+      } catch (error) {\n+        console.log('Erro ao verificar atualiza√ß√£o:', error);\n+      }\n+    }\n+\n+    checkForUpdate();\n+  }, []);\n+\n+  return (\n+    updateInfo && (\n+      <UpdateModal\n+        visible={true}\n+        changelog={updateInfo.changelog}\n+        version={updateInfo.version}\n+        apkUrl={updateInfo.apkUrl}\n+        onClose={() => setUpdateInfo(null)}\n+      />\n+    )\n+  );\n+}\n+\n+function isNewerVersion(remote, local) {\n+  const r = remote.split('.').map(Number);\n+  const l = local.split('.').map(Number);\n+  for (let i = 0; i < r.length; i++) {\n+    if (r[i] > (l[i] || 0)) return true;\n+    if (r[i] < (l[i] || 0)) return false;\n+  }\n+  return false;\n+}\n"
                },
                {
                    "date": 1760655862833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,56 @@\n+import { useEffect, useState } from 'react';\n+import Constants from 'expo-constants';\n+import UpdateModal from '@/components/updateModal/UpdateModal';\n+\n+export default function useCheckUpdate() {\n+  const [updateInfo, setUpdateInfo] = useState(null);\n+\n+  useEffect(() => {\n+    async function checkForUpdate() {\n+      try {\n+        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n+        const data = await response.json();\n+\n+        const localVersion = Constants.expoConfig.version;\n+        console.log('Vers√£o local:', localVersion);\n+        console.log('Vers√£o remota:', data);\n+\n+        const remoteVersion = data.version;\n+\n+        if (isNewerVersion(remoteVersion, localVersion)) {\n+          setUpdateInfo({\n+            changelog: data.changelog,\n+            version: remoteVersion,\n+            apkUrl: data.apkUrl,\n+          });\n+        }\n+      } catch (error) {\n+        console.log('Erro ao verificar atualiza√ß√£o:', error);\n+      }\n+    }\n+\n+    checkForUpdate();\n+  }, []);\n+\n+  return (\n+    updateInfo && (\n+      <UpdateModal\n+        visible={true}\n+        changelog={updateInfo.changelog}\n+        version={updateInfo.version}\n+        apkUrl={updateInfo.apkUrl}\n+        onClose={() => setUpdateInfo(null)}\n+      />\n+    )\n+  );\n+}\n+\n+function isNewerVersion(remote, local) {\n+  const r = remote.split('.').map(Number);\n+  const l = local.split('.').map(Number);\n+  for (let i = 0; i < r.length; i++) {\n+    if (r[i] > (l[i] || 0)) return true;\n+    if (r[i] < (l[i] || 0)) return false;\n+  }\n+  return false;\n+}\n"
                },
                {
                    "date": 1760655869346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,56 @@\n+import { useEffect, useState } from 'react';\n+import Constants from 'expo-constants';\n+import UpdateModal from '@/components/updateModal/UpdateModal';\n+\n+export default function useCheckUpdate() {\n+  const [updateInfo, setUpdateInfo] = useState(null);\n+\n+  useEffect(() => {\n+    async function checkForUpdate() {\n+      try {\n+        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n+        const data = await response.json();\n+\n+        const localVersion = Constants.expoConfig.version;\n+        console.log('Vers√£o local:', localVersion);\n+        console.log('Vers√£o remota:', data.);\n+\n+        const remoteVersion = data.version;\n+\n+        if (isNewerVersion(remoteVersion, localVersion)) {\n+          setUpdateInfo({\n+            changelog: data.changelog,\n+            version: remoteVersion,\n+            apkUrl: data.apkUrl,\n+          });\n+        }\n+      } catch (error) {\n+        console.log('Erro ao verificar atualiza√ß√£o:', error);\n+      }\n+    }\n+\n+    checkForUpdate();\n+  }, []);\n+\n+  return (\n+    updateInfo && (\n+      <UpdateModal\n+        visible={true}\n+        changelog={updateInfo.changelog}\n+        version={updateInfo.version}\n+        apkUrl={updateInfo.apkUrl}\n+        onClose={() => setUpdateInfo(null)}\n+      />\n+    )\n+  );\n+}\n+\n+function isNewerVersion(remote, local) {\n+  const r = remote.split('.').map(Number);\n+  const l = local.split('.').map(Number);\n+  for (let i = 0; i < r.length; i++) {\n+    if (r[i] > (l[i] || 0)) return true;\n+    if (r[i] < (l[i] || 0)) return false;\n+  }\n+  return false;\n+}\n"
                },
                {
                    "date": 1760655878856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,176 +12,8 @@\n         const data = await response.json();\n \n         const localVersion = Constants.expoConfig.version;\n         console.log('Vers√£o local:', localVersion);\n-        console.log('Vers√£o remota:', data.);\n-\n-        const remoteVersion = data.version;\n-\n-        if (isNewerVersion(remoteVersion, localVersion)) {\n-          setUpdateInfo({\n-            changelog: data.changelog,\n-            version: remoteVersion,\n-            apkUrl: data.apkUrl,\n-          });\n-        }\n-      } catch (error) {\n-        console.log('Erro ao verificar atualiza√ß√£o:', error);\n-      }\n-    }\n-\n-    checkForUpdate();\n-  }, []);\n-\n-  return (\n-    updateInfo && (\n-      <UpdateModal\n-        visible={true}\n-        changelog={updateInfo.changelog}\n-        version={updateInfo.version}\n-        apkUrl={updateInfo.apkUrl}\n-        onClose={() => setUpdateInfo(null)}\n-      />\n-    )\n-  );\n-}\n-\n-function isNewerVersion(remote, local) {\n-  const r = remote.split('.').map(Number);\n-  const l = local.split('.').map(Number);\n-  for (let i = 0; i < r.length; i++) {\n-    if (r[i] > (l[i] || 0)) return true;\n-    if (r[i] < (l[i] || 0)) return false;\n-  }\n-  return false;\n-}\n-import { useEffect, useState } from 'react';\n-import Constants from 'expo-constants';\n-import UpdateModal from '@/components/updateModal/UpdateModal';\n-\n-export default function useCheckUpdate() {\n-  const [updateInfo, setUpdateInfo] = useState(null);\n-\n-  useEffect(() => {\n-    async function checkForUpdate() {\n-      try {\n-        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n-        const data = await response.json();\n-\n-        const localVersion = Constants.expoConfig.version;\n-        console.log('Vers√£o local:', localVersion);\n-        console.log('Vers√£o remota:', data);\n-\n-        const remoteVersion = data.version;\n-\n-        if (isNewerVersion(remoteVersion, localVersion)) {\n-          setUpdateInfo({\n-            changelog: data.changelog,\n-            version: remoteVersion,\n-            apkUrl: data.apkUrl,\n-          });\n-        }\n-      } catch (error) {\n-        console.log('Erro ao verificar atualiza√ß√£o:', error);\n-      }\n-    }\n-\n-    checkForUpdate();\n-  }, []);\n-\n-  return (\n-    updateInfo && (\n-      <UpdateModal\n-        visible={true}\n-        changelog={updateInfo.changelog}\n-        version={updateInfo.version}\n-        apkUrl={updateInfo.apkUrl}\n-        onClose={() => setUpdateInfo(null)}\n-      />\n-    )\n-  );\n-}\n-\n-function isNewerVersion(remote, local) {\n-  const r = remote.split('.').map(Number);\n-  const l = local.split('.').map(Number);\n-  for (let i = 0; i < r.length; i++) {\n-    if (r[i] > (l[i] || 0)) return true;\n-    if (r[i] < (l[i] || 0)) return false;\n-  }\n-  return false;\n-}\n-import { useEffect, useState } from 'react';\n-import Constants from 'expo-constants';\n-import UpdateModal from '@/components/updateModal/UpdateModal';\n-\n-export default function useCheckUpdate() {\n-  const [updateInfo, setUpdateInfo] = useState(null);\n-\n-  useEffect(() => {\n-    async function checkForUpdate() {\n-      try {\n-        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n-        const data = await response.json();\n-\n-        const localVersion = Constants.expoConfig.version;\n-        console.log('Vers√£o local:', localVersion);\n-        console.log('Vers√£o remota:', data.);\n-\n-        const remoteVersion = data.version;\n-\n-        if (isNewerVersion(remoteVersion, localVersion)) {\n-          setUpdateInfo({\n-            changelog: data.changelog,\n-            version: remoteVersion,\n-            apkUrl: data.apkUrl,\n-          });\n-        }\n-      } catch (error) {\n-        console.log('Erro ao verificar atualiza√ß√£o:', error);\n-      }\n-    }\n-\n-    checkForUpdate();\n-  }, []);\n-\n-  return (\n-    updateInfo && (\n-      <UpdateModal\n-        visible={true}\n-        changelog={updateInfo.changelog}\n-        version={updateInfo.version}\n-        apkUrl={updateInfo.apkUrl}\n-        onClose={() => setUpdateInfo(null)}\n-      />\n-    )\n-  );\n-}\n-\n-function isNewerVersion(remote, local) {\n-  const r = remote.split('.').map(Number);\n-  const l = local.split('.').map(Number);\n-  for (let i = 0; i < r.length; i++) {\n-    if (r[i] > (l[i] || 0)) return true;\n-    if (r[i] < (l[i] || 0)) return false;\n-  }\n-  return false;\n-}\n-import { useEffect, useState } from 'react';\n-import \n-import UpdateModal from '@/components/updateModal/UpdateModal';\n-\n-export default function useCheckUpdate() {\n-  const [updateInfo, setUpdateInfo] = useState(null);\n-\n-  useEffect(() => {\n-    async function checkForUpdate() {\n-      try {\n-        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n-        const data = await response.json();\n-\n-        const localVersion = Constants.expoConfig.version;\n-        console.log('Vers√£o local:', localVersion);\n         console.log('Vers√£o remota:', data.version);\n \n         const remoteVersion = data.version;\n \n@@ -221,218 +53,4 @@\n     if (r[i] < (l[i] || 0)) return false;\n   }\n   return false;\n }\n-import { useEffect, useState } from 'react';\n-import Constants from 'expo-constants';\n-import UpdateModal from '@/components/updateModal/UpdateModal';\n-\n-export default function useCheckUpdate() {\n-  const [updateInfo, setUpdateInfo] = useState(null);\n-\n-  useEffect(() => {\n-    async function checkForUpdate() {\n-      try {\n-        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n-        const data = await response.json();\n-\n-        const localVersion = Constants.expoConfig.version;\n-        console.log\n-        const remoteVersion = data.version;\n-\n-        if (isNewerVersion(remoteVersion, localVersion)) {\n-          setUpdateInfo({\n-            changelog: data.changelog,\n-            version: remoteVersion,\n-            apkUrl: data.apkUrl,\n-          });\n-        }\n-      } catch (error) {\n-        console.log('Erro ao verificar atualiza√ß√£o:', error);\n-      }\n-    }\n-\n-    checkForUpdate();\n-  }, []);\n-\n-  return (\n-    updateInfo && (\n-      <UpdateModal\n-        visible={true}\n-        changelog={updateInfo.changelog}\n-        version={updateInfo.version}\n-        apkUrl={updateInfo.apkUrl}\n-        onClose={() => setUpdateInfo(null)}\n-      />\n-    )\n-  );\n-}\n-\n-function isNewerVersion(remote, local) {\n-  const r = remote.split('.').map(Number);\n-  const l = local.split('.').map(Number);\n-  for (let i = 0; i < r.length; i++) {\n-    if (r[i] > (l[i] || 0)) return true;\n-    if (r[i] < (l[i] || 0)) return false;\n-  }\n-  return false;\n-}\n-import { useEffect, useState } from 'react';\n-import Constants from 'expo-constants';\n-import UpdateModal from '@/components/updateModal/UpdateModal';\n-\n-export default function useCheckUpdate() {\n-  const [updateInfo, setUpdateInfo] = useState(null);\n-\n-  useEffect(() => {\n-    async function checkForUpdate() {\n-      try {\n-        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n-        const data = await response.json();\n-\n-        const localVersion = Constants.expoConfig.version;\n-        console\n-        const remoteVersion = data.version;\n-\n-        if (isNewerVersion(remoteVersion, localVersion)) {\n-          setUpdateInfo({\n-            changelog: data.changelog,\n-            version: remoteVersion,\n-            apkUrl: data.apkUrl,\n-          });\n-        }\n-      } catch (error) {\n-        console.log('Erro ao verificar atualiza√ß√£o:', error);\n-      }\n-    }\n-\n-    checkForUpdate();\n-  }, []);\n-\n-  return (\n-    updateInfo && (\n-      <UpdateModal\n-        visible={true}\n-        changelog={updateInfo.changelog}\n-        version={updateInfo.version}\n-        apkUrl={updateInfo.apkUrl}\n-        onClose={() => setUpdateInfo(null)}\n-      />\n-    )\n-  );\n-}\n-\n-function isNewerVersion(remote, local) {\n-  const r = remote.split('.').map(Number);\n-  const l = local.split('.').map(Number);\n-  for (let i = 0; i < r.length; i++) {\n-    if (r[i] > (l[i] || 0)) return true;\n-    if (r[i] < (l[i] || 0)) return false;\n-  }\n-  return false;\n-}\n-import { useEffect, useState } from 'react';\n-import Constants from 'expo-constants';\n-import UpdateModal from '@/components/updateModal/UpdateModal';\n-\n-export default function useCheckUpdate() {\n-  const [updateInfo, setUpdateInfo] = useState(null);\n-\n-  useEffect(() => {\n-    async function checkForUpdate() {\n-      try {\n-        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n-        const data = await response.json();\n-\n-        const localVersion = Constants.expoConfig.version;\n-        const remoteVersion = data.version;\n-\n-        if (isNewerVersion(remoteVersion, localVersion)) {\n-          setUpdateInfo({\n-            changelog: data.changelog,\n-            version: remoteVersion,\n-            apkUrl: data.apkUrl,\n-          });\n-        }\n-      } catch (error) {\n-        console.log('Erro ao verificar atualiza√ß√£o:', error);\n-      }\n-    }\n-\n-    checkForUpdate();\n-  }, []);\n-\n-  return (\n-    updateInfo && (\n-      <UpdateModal\n-        visible={true}\n-        changelog={updateInfo.changelog}\n-        version={updateInfo.version}\n-        apkUrl={updateInfo.apkUrl}\n-        onClose={() => setUpdateInfo(null)}\n-      />\n-    )\n-  );\n-}\n-\n-function isNewerVersion(remote, local) {\n-  const r = remote.split('.').map(Number);\n-  const l = local.split('.').map(Number);\n-  for (let i = 0; i < r.length; i++) {\n-    if (r[i] > (l[i] || 0)) return true;\n-    if (r[i] < (l[i] || 0)) return false;\n-  }\n-  return false;\n-}\n-import { useEffect, useState } from 'react';\n-import Constants from 'expo-constants';\n-import UpdateModal from '@/components/';\n-\n-export default function useCheckUpdate() {\n-  const [updateInfo, setUpdateInfo] = useState(null);\n-\n-  useEffect(() => {\n-    async function checkForUpdate() {\n-      try {\n-        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n-        const data = await response.json();\n-\n-        const localVersion = Constants.expoConfig.version;\n-        const remoteVersion = data.version;\n-\n-        if (isNewerVersion(remoteVersion, localVersion)) {\n-          setUpdateInfo({\n-            changelog: data.changelog,\n-            version: remoteVersion,\n-            apkUrl: data.apkUrl,\n-          });\n-        }\n-      } catch (error) {\n-        console.log('Erro ao verificar atualiza√ß√£o:', error);\n-      }\n-    }\n-\n-    checkForUpdate();\n-  }, []);\n-\n-  return (\n-    updateInfo && (\n-      <UpdateModal\n-        visible={true}\n-        changelog={updateInfo.changelog}\n-        version={updateInfo.version}\n-        apkUrl={updateInfo.apkUrl}\n-        onClose={() => setUpdateInfo(null)}\n-      />\n-    )\n-  );\n-}\n-\n-function isNewerVersion(remote, local) {\n-  const r = remote.split('.').map(Number);\n-  const l = local.split('.').map(Number);\n-  for (let i = 0; i < r.length; i++) {\n-    if (r[i] > (l[i] || 0)) return true;\n-    if (r[i] < (l[i] || 0)) return false;\n-  }\n-  return false;\n-}\n"
                },
                {
                    "date": 1760655896160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n \n         const localVersion = Constants.expoConfig.version;\n         console.log('Vers√£o local:', localVersion);\n         console.log('Vers√£o remota:', data.version);\n+        console\n \n         const remoteVersion = data.version;\n \n         if (isNewerVersion(remoteVersion, localVersion)) {\n"
                },
                {
                    "date": 1760655902551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+import { useEffect, useState } from 'react';\n+import Constants from 'expo-constants';\n+import UpdateModal from '@/components/updateModal/UpdateModal';\n+\n+export default function useCheckUpdate() {\n+  const [updateInfo, setUpdateInfo] = useState(null);\n+\n+  useEffect(() => {\n+    async function checkForUpdate() {\n+      try {\n+        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n+        const data = await response.json();\n+\n+        const localVersion = Constants.expoConfig.version;\n+        console.log('Vers√£o local:', localVersion);\n+        console.log('Vers√£o remota:', data.version);\n+        console.log()\n+\n+        const remoteVersion = data.version;\n+\n+        if (isNewerVersion(remoteVersion, localVersion)) {\n+          setUpdateInfo({\n+            changelog: data.changelog,\n+            version: remoteVersion,\n+            apkUrl: data.apkUrl,\n+          });\n+        }\n+      } catch (error) {\n+        console.log('Erro ao verificar atualiza√ß√£o:', error);\n+      }\n+    }\n+\n+    checkForUpdate();\n+  }, []);\n+\n+  return (\n+    updateInfo && (\n+      <UpdateModal\n+        visible={true}\n+        changelog={updateInfo.changelog}\n+        version={updateInfo.version}\n+        apkUrl={updateInfo.apkUrl}\n+        onClose={() => setUpdateInfo(null)}\n+      />\n+    )\n+  );\n+}\n+\n+function isNewerVersion(remote, local) {\n+  const r = remote.split('.').map(Number);\n+  const l = local.split('.').map(Number);\n+  for (let i = 0; i < r.length; i++) {\n+    if (r[i] > (l[i] || 0)) return true;\n+    if (r[i] < (l[i] || 0)) return false;\n+  }\n+  return false;\n+}\n"
                },
                {
                    "date": 1760655950950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,58 @@\n+import { useEffect, useState } from 'react';\n+import Constants from 'expo-constants';\n+import UpdateModal from '@/components/updateModal/UpdateModal';\n+\n+export default function useCheckUpdate() {\n+  const [updateInfo, setUpdateInfo] = useState(null);\n+\n+  useEffect(() => {\n+    async function checkForUpdate() {\n+      try {\n+        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n+        const data = await response.json();\n+\n+        const localVersion = Constants.expoConfig.version;\n+        console.log('Vers√£o local:', localVersion);\n+        console.log('Vers√£o remota:', data.\n+          latestVersion);\n+        console.log(response)\n+\n+        const remoteVersion = data.version;\n+\n+        if (isNewerVersion(remoteVersion, localVersion)) {\n+          setUpdateInfo({\n+            changelog: data.changelog,\n+            version: remoteVersion,\n+            apkUrl: data.apkUrl,\n+          });\n+        }\n+      } catch (error) {\n+        console.log('Erro ao verificar atualiza√ß√£o:', error);\n+      }\n+    }\n+\n+    checkForUpdate();\n+  }, []);\n+\n+  return (\n+    updateInfo && (\n+      <UpdateModal\n+        visible={true}\n+        changelog={updateInfo.changelog}\n+        version={updateInfo.version}\n+        apkUrl={updateInfo.apkUrl}\n+        onClose={() => setUpdateInfo(null)}\n+      />\n+    )\n+  );\n+}\n+\n+function isNewerVersion(remote, local) {\n+  const r = remote.split('.').map(Number);\n+  const l = local.split('.').map(Number);\n+  for (let i = 0; i < r.length; i++) {\n+    if (r[i] > (l[i] || 0)) return true;\n+    if (r[i] < (l[i] || 0)) return false;\n+  }\n+  return false;\n+}\n"
                },
                {
                    "date": 1760655958124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+import { useEffect, useState } from 'react';\n+import Constants from 'expo-constants';\n+import UpdateModal from '@/components/updateModal/UpdateModal';\n+\n+export default function useCheckUpdate() {\n+  const [updateInfo, setUpdateInfo] = useState(null);\n+\n+  useEffect(() => {\n+    async function checkForUpdate() {\n+      try {\n+        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n+        const data = await response.json();\n+\n+        const localVersion = Constants.expoConfig.version;\n+        console.log('Vers√£o local:', localVersion);\n+        console.log('Vers√£o remota:', data.\n+                 console.log(response)\n+\n+        const remoteVersion = data.version;\n+\n+        if (isNewerVersion(remoteVersion, localVersion)) {\n+          setUpdateInfo({\n+            changelog: data.changelog,\n+            version: remoteVersion,\n+            apkUrl: data.apkUrl,\n+          });\n+        }\n+      } catch (error) {\n+        console.log('Erro ao verificar atualiza√ß√£o:', error);\n+      }\n+    }\n+\n+    checkForUpdate();\n+  }, []);\n+\n+  return (\n+    updateInfo && (\n+      <UpdateModal\n+        visible={true}\n+        changelog={updateInfo.changelog}\n+        version={updateInfo.version}\n+        apkUrl={updateInfo.apkUrl}\n+        onClose={() => setUpdateInfo(null)}\n+      />\n+    )\n+  );\n+}\n+\n+function isNewerVersion(remote, local) {\n+  const r = remote.split('.').map(Number);\n+  const l = local.split('.').map(Number);\n+  for (let i = 0; i < r.length; i++) {\n+    if (r[i] > (l[i] || 0)) return true;\n+    if (r[i] < (l[i] || 0)) return false;\n+  }\n+  return false;\n+}\n"
                },
                {
                    "date": 1760655968219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n         const data = await response.json();\n \n         const localVersion = Constants.expoConfig.version;\n         console.log('Vers√£o local:', localVersion);\n-        console.log('Vers√£o remota:', data.);\n+        console.log('Vers√£o remota:', data.latest);\n         console.log(response)\n \n         const remoteVersion = data.version;\n \n"
                },
                {
                    "date": 1760655978900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+import { useEffect, useState } from 'react';\n+import Constants from 'expo-constants';\n+import UpdateModal from '@/components/updateModal/UpdateModal';\n+\n+export default function useCheckUpdate() {\n+  const [updateInfo, setUpdateInfo] = useState(null);\n+\n+  useEffect(() => {\n+    async function checkForUpdate() {\n+      try {\n+        const response = await fetch('https://raw.githubusercontent.com/otreborBz/employees-update/refs/heads/main/udapte.json');\n+        const data = await response.json();\n+\n+        const localVersion = Constants.expoConfig.version;\n+        console.log('Vers√£o local:', localVersion);\n+        console.log('Vers√£o remota:', data.latestVersion);\n+        console.log(response.)\n+\n+        const remoteVersion = data.version;\n+\n+        if (isNewerVersion(remoteVersion, localVersion)) {\n+          setUpdateInfo({\n+            changelog: data.changelog,\n+            version: remoteVersion,\n+            apkUrl: data.apkUrl,\n+          });\n+        }\n+      } catch (error) {\n+        console.log('Erro ao verificar atualiza√ß√£o:', error);\n+      }\n+    }\n+\n+    checkForUpdate();\n+  }, []);\n+\n+  return (\n+    updateInfo && (\n+      <UpdateModal\n+        visible={true}\n+        changelog={updateInfo.changelog}\n+        version={updateInfo.version}\n+        apkUrl={updateInfo.apkUrl}\n+        onClose={() => setUpdateInfo(null)}\n+      />\n+    )\n+  );\n+}\n+\n+function isNewerVersion(remote, local) {\n+  const r = remote.split('.').map(Number);\n+  const l = local.split('.').map(Number);\n+  for (let i = 0; i < r.length; i++) {\n+    if (r[i] > (l[i] || 0)) return true;\n+    if (r[i] < (l[i] || 0)) return false;\n+  }\n+  return false;\n+}\n"
                }
            ],
            "date": 1760653830024,
            "name": "Commit-0",
            "content": "// src/hooks/useCheckUpdate.js\nimport { useEffect } from 'react';\nimport { Alert, Linking } from 'react-native';\nimport Constants from 'expo-constants';\n\nexport default function useCheckUpdate() {\n  useEffect(() => {\n    async function checkForUpdate() {\n      try {\n        const response = await fetch('https://seusite.com/update.json'); // üîó seu link real\n        const data = await response.json();\n\n        const localVersion = Constants.expoConfig.version;\n        const remoteVersion = data.version;\n\n        if (isNewerVersion(remoteVersion, localVersion)) {\n          Alert.alert(\n            'Nova vers√£o dispon√≠vel üöÄ',\n            `${data.changelog}\\n\\nVers√£o: ${remoteVersion}`,\n            [\n              { text: 'Mais tarde', style: 'cancel' },\n              { text: 'Baixar agora', onPress: () => Linking.openURL(data.apkUrl) },\n            ]\n          );\n        }\n      } catch (error) {\n        console.log('Erro ao verificar atualiza√ß√£o:', error);\n      }\n    }\n\n    checkForUpdate();\n  }, []);\n}\n\n// üîß Compara as vers√µes (ex: 1.1.0 > 1.0.0)\nfunction isNewerVersion(remote, local) {\n  const r = remote.split('.').map(Number);\n  const l = local.split('.').map(Number);\n  for (let i = 0; i < r.length; i++) {\n    if (r[i] > (l[i] || 0)) return true;\n    if (r[i] < (l[i] || 0)) return false;\n  }\n  return false;\n}\n"
        }
    ]
}