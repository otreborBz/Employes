{
    "sourceFile": "src/screens/newEmployes/NewEmployes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1760648900267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760648909578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { Ionicons } from '@expo/vector-icons';\n import { useNavigation, useRoute } from '@react-navigation/native';\n import { useEffect, useState } from 'react';\n import { FlatList, KeyboardAvoidingView, Modal, Platform, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';\n+import \n \n export default function AddEditEmployee() {\n   const navigation = useNavigation();\n   const route = useRoute();\n"
                },
                {
                    "date": 1760648916408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,11 @@\n import { Ionicons } from '@expo/vector-icons';\n import { useNavigation, useRoute } from '@react-navigation/native';\n import { useEffect, useState } from 'react';\n import { FlatList, KeyboardAvoidingView, Modal, Platform, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';\n-import \n+import styles from './styles';\n \n+\n export default function AddEditEmployee() {\n   const navigation = useNavigation();\n   const route = useRoute();\n   const employeeId = route.params?.employeeId;\n"
                },
                {
                    "date": 1760649394140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { FlatList, KeyboardAvoidingView, Modal, Platform, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';\n import styles from './styles';\n \n \n-export default function AddEditEmployee() {\n+export default function NewEmployes() {\n   const navigation = useNavigation();\n   const route = useRoute();\n   const employeeId = route.params?.employeeId;\n \n"
                },
                {
                    "date": 1760653248872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,17 +166,17 @@\n               <TouchableOpacity style={styles.modalAddButton} onPress={() => { if (novoTurnoInput.trim()) { setTurno(novoTurnoInput.trim().toUpperCase()); setNovoTurnoInput(''); setTurnoModalVisible(false); } }}>\n                 <Ionicons name=\"add-circle\" size={28} color=\"#007bff\" />\n               </TouchableOpacity>\n             </View>\n-            <FlatList\n+            {/* <FlatList\n               data={turnosUnicos}\n               keyExtractor={(item) => item}\n               renderItem={({ item }) => (\n                 <TouchableOpacity style={styles.modalOption} onPress={() => { setTurno(item); setTurnoModalVisible(false); }}>\n                   <Text style={styles.modalOptionText}>{item}</Text>\n                 </TouchableOpacity>\n               )}\n-            />\n+            /> */}\n           </View>\n         </View>\n       </Modal>\n \n"
                },
                {
                    "date": 1760653300226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,17 +166,17 @@\n               <TouchableOpacity style={styles.modalAddButton} onPress={() => { if (novoTurnoInput.trim()) { setTurno(novoTurnoInput.trim().toUpperCase()); setNovoTurnoInput(''); setTurnoModalVisible(false); } }}>\n                 <Ionicons name=\"add-circle\" size={28} color=\"#007bff\" />\n               </TouchableOpacity>\n             </View>\n-            {/* <FlatList\n+            <FlatList\n               data={turnosUnicos}\n               keyExtractor={(item) => item}\n               renderItem={({ item }) => (\n                 <TouchableOpacity style={styles.modalOption} onPress={() => { setTurno(item); setTurnoModalVisible(false); }}>\n                   <Text style={styles.modalOptionText}>{item}</Text>\n                 </TouchableOpacity>\n               )}\n-            /> */}\n+            />\n           </View>\n         </View>\n       </Modal>\n \n"
                },
                {
                    "date": 1760653400301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,13 @@\n import { addFuncionario, getFuncionarioById, getFuncionarios, updateFuncionario } from '@/sqLite/SQLiteConecction';\n import { Ionicons } from '@expo/vector-icons';\n import { useNavigation, useRoute } from '@react-navigation/native';\n import { useEffect, useState } from 'react';\n+import AsyncStorage from '@react-native-async-storage/async-storage';\n+import { useEffect, useState, useCallback } from 'react';\n import { FlatList, KeyboardAvoidingView, Modal, Platform, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';\n import styles from './styles';\n+import styles from './styles'; // Assumindo que os estilos já existem\n \n \n export default function NewEmployes() {\n   const navigation = useNavigation();\n@@ -27,18 +30,32 @@\n   const baseTurnos = ['A', 'B', 'C', 'X', 'Y', '1', '2', '3'];\n \n   const [alertInfo, setAlertInfo] = useState({ visible: false });\n \n+  // Carrega os dados da tela (funcionário para edição e listas de seleção)\n   useEffect(() => {\n     const loadScreenData = async () => {\n       // Carrega a lista de setores e turnos existentes para os seletores\n+      // Carrega itens customizados do AsyncStorage\n+      const customSectors = await getCustomItems('@customSectors');\n+      const customTurnos = await getCustomItems('@customTurnos');\n+\n+      // Carrega funcionários para extrair setores e turnos em uso\n       const allFuncionarios = await getFuncionarios();\n       const setores = [...new Set(allFuncionarios.map(f => f.setor).filter(Boolean).sort())];\n       const turnos = [...new Set([...baseTurnos, ...allFuncionarios.map(f => f.turno)].filter(Boolean).sort())];\n+      const usedSectors = allFuncionarios.map(f => f.setor);\n+      const usedTurnos = allFuncionarios.map(f => f.turno);\n+\n+      // Combina e remove duplicatas\n+      const setores = [...new Set([...customSectors, ...usedSectors].filter(Boolean))].sort();\n+      const turnos = [...new Set([...baseTurnos, ...customTurnos, ...usedTurnos].filter(Boolean))].sort();\n+\n       setSetoresUnicos(setores);\n       setTurnosUnicos(turnos);\n \n       // Se for modo de edição, carrega os dados do funcionário\n+      // Se for modo de edição, preenche o formulário\n       if (employeeId) {\n         const funcionario = await getFuncionarioById(employeeId);\n         if (funcionario) {\n           setNome(funcionario.nome);\n@@ -51,8 +68,9 @@\n \n     loadScreenData();\n   }, [employeeId]);\n \n+  \n   const handleSalvar = async () => {\n     if (!nome || !re || !setor || !turno) {\n       setAlertInfo({\n         visible: true,\n@@ -82,8 +100,53 @@\n       });\n     }\n   };\n \n+  // Funções auxiliares para AsyncStorage\n+  const getCustomItems = async (key) => {\n+    try {\n+      const jsonValue = await AsyncStorage.getItem(key);\n+      return jsonValue != null ? JSON.parse(jsonValue) : [];\n+    } catch (e) {\n+      console.error(`Erro ao ler ${key} do AsyncStorage`, e);\n+      return [];\n+    }\n+  };\n+\n+  const addCustomItem = async (key, newItem, currentList, setList) => {\n+    const upperCaseItem = newItem.toUpperCase();\n+    if (!upperCaseItem || currentList.map(i => i.toUpperCase()).includes(upperCaseItem)) return;\n+\n+    try {\n+      const newList = [...currentList, newItem].sort();\n+      setList(newList); // Atualiza a lista na UI\n+      await AsyncStorage.setItem(key, JSON.stringify(newList));\n+    } catch (e) {\n+      console.error(`Erro ao salvar ${key} no AsyncStorage`, e);\n+    }\n+  };\n+\n+  // Funções para adicionar novos setores/turnos\n+  const handleAddNewSetor = () => {\n+    const trimmedInput = novoSetorInput.trim();\n+    if (trimmedInput) {\n+      setSetor(trimmedInput);\n+      addCustomItem('@customSectors', trimmedInput, setoresUnicos, setSetoresUnicos);\n+      setNovoSetorInput('');\n+      setSetorModalVisible(false);\n+    }\n+  };\n+\n+  const handleAddNewTurno = () => {\n+    const trimmedInput = novoTurnoInput.trim().toUpperCase();\n+    if (trimmedInput) {\n+      setTurno(trimmedInput);\n+      addCustomItem('@customTurnos', trimmedInput, turnosUnicos, setTurnosUnicos);\n+      setNovoTurnoInput('');\n+      setTurnoModalVisible(false);\n+    }\n+  };\n+\n   return (\n     <KeyboardAvoidingView\n       behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n       style={styles.container}\n@@ -136,8 +199,10 @@\n             <Text style={styles.modalTitle}>Setores</Text>\n             <View style={styles.modalInputContainer}>\n               <TextInput placeholder=\"Adicionar novo setor\" placeholderTextColor=\"#888\" value={novoSetorInput} onChangeText={setNovoSetorInput} style={styles.modalInput} />\n               <TouchableOpacity style={styles.modalAddButton} onPress={() => { if (novoSetorInput.trim()) { setSetor(novoSetorInput.trim()); setNovoSetorInput(''); setSetorModalVisible(false); } }}>\n+              <TextInput placeholder=\"Adicionar novo setor\" placeholderTextColor=\"#888\" value={novoSetorInput} onChangeText={setNovoSetorInput} style={styles.modalInput} onSubmitEditing={handleAddNewSetor} />\n+              <TouchableOpacity style={styles.modalAddButton} onPress={handleAddNewSetor}>\n                 <Ionicons name=\"add-circle\" size={28} color=\"#007bff\" />\n               </TouchableOpacity>\n             </View>\n             <FlatList\n@@ -163,8 +228,10 @@\n             <Text style={styles.modalTitle}>Turnos</Text>\n             <View style={styles.modalInputContainer}>\n               <TextInput placeholder=\"Adicionar novo turno\" placeholderTextColor=\"#888\" value={novoTurnoInput} onChangeText={setNovoTurnoInput} style={styles.modalInput} />\n               <TouchableOpacity style={styles.modalAddButton} onPress={() => { if (novoTurnoInput.trim()) { setTurno(novoTurnoInput.trim().toUpperCase()); setNovoTurnoInput(''); setTurnoModalVisible(false); } }}>\n+              <TextInput placeholder=\"Adicionar novo turno\" placeholderTextColor=\"#888\" value={novoTurnoInput} onChangeText={setNovoTurnoInput} style={styles.modalInput} onSubmitEditing={handleAddNewTurno} />\n+              <TouchableOpacity style={styles.modalAddButton} onPress={handleAddNewTurno}>\n                 <Ionicons name=\"add-circle\" size={28} color=\"#007bff\" />\n               </TouchableOpacity>\n             </View>\n             <FlatList\n"
                },
                {
                    "date": 1760653426202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,13 +2,10 @@\n import { addFuncionario, getFuncionarioById, getFuncionarios, updateFuncionario } from '@/sqLite/SQLiteConecction';\n import { Ionicons } from '@expo/vector-icons';\n import { useNavigation, useRoute } from '@react-navigation/native';\n import { useEffect, useState } from 'react';\n-import AsyncStorage from '@react-native-async-storage/async-storage';\n-import { useEffect, useState, useCallback } from 'react';\n import { FlatList, KeyboardAvoidingView, Modal, Platform, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';\n import styles from './styles';\n-import styles from './styles'; // Assumindo que os estilos já existem\n \n \n export default function NewEmployes() {\n   const navigation = useNavigation();\n@@ -30,32 +27,18 @@\n   const baseTurnos = ['A', 'B', 'C', 'X', 'Y', '1', '2', '3'];\n \n   const [alertInfo, setAlertInfo] = useState({ visible: false });\n \n-  // Carrega os dados da tela (funcionário para edição e listas de seleção)\n   useEffect(() => {\n     const loadScreenData = async () => {\n       // Carrega a lista de setores e turnos existentes para os seletores\n-      // Carrega itens customizados do AsyncStorage\n-      const customSectors = await getCustomItems('@customSectors');\n-      const customTurnos = await getCustomItems('@customTurnos');\n-\n-      // Carrega funcionários para extrair setores e turnos em uso\n       const allFuncionarios = await getFuncionarios();\n       const setores = [...new Set(allFuncionarios.map(f => f.setor).filter(Boolean).sort())];\n       const turnos = [...new Set([...baseTurnos, ...allFuncionarios.map(f => f.turno)].filter(Boolean).sort())];\n-      const usedSectors = allFuncionarios.map(f => f.setor);\n-      const usedTurnos = allFuncionarios.map(f => f.turno);\n-\n-      // Combina e remove duplicatas\n-      const setores = [...new Set([...customSectors, ...usedSectors].filter(Boolean))].sort();\n-      const turnos = [...new Set([...baseTurnos, ...customTurnos, ...usedTurnos].filter(Boolean))].sort();\n-\n       setSetoresUnicos(setores);\n       setTurnosUnicos(turnos);\n \n       // Se for modo de edição, carrega os dados do funcionário\n-      // Se for modo de edição, preenche o formulário\n       if (employeeId) {\n         const funcionario = await getFuncionarioById(employeeId);\n         if (funcionario) {\n           setNome(funcionario.nome);\n@@ -68,9 +51,8 @@\n \n     loadScreenData();\n   }, [employeeId]);\n \n-  \n   const handleSalvar = async () => {\n     if (!nome || !re || !setor || !turno) {\n       setAlertInfo({\n         visible: true,\n@@ -100,53 +82,8 @@\n       });\n     }\n   };\n \n-  // Funções auxiliares para AsyncStorage\n-  const getCustomItems = async (key) => {\n-    try {\n-      const jsonValue = await AsyncStorage.getItem(key);\n-      return jsonValue != null ? JSON.parse(jsonValue) : [];\n-    } catch (e) {\n-      console.error(`Erro ao ler ${key} do AsyncStorage`, e);\n-      return [];\n-    }\n-  };\n-\n-  const addCustomItem = async (key, newItem, currentList, setList) => {\n-    const upperCaseItem = newItem.toUpperCase();\n-    if (!upperCaseItem || currentList.map(i => i.toUpperCase()).includes(upperCaseItem)) return;\n-\n-    try {\n-      const newList = [...currentList, newItem].sort();\n-      setList(newList); // Atualiza a lista na UI\n-      await AsyncStorage.setItem(key, JSON.stringify(newList));\n-    } catch (e) {\n-      console.error(`Erro ao salvar ${key} no AsyncStorage`, e);\n-    }\n-  };\n-\n-  // Funções para adicionar novos setores/turnos\n-  const handleAddNewSetor = () => {\n-    const trimmedInput = novoSetorInput.trim();\n-    if (trimmedInput) {\n-      setSetor(trimmedInput);\n-      addCustomItem('@customSectors', trimmedInput, setoresUnicos, setSetoresUnicos);\n-      setNovoSetorInput('');\n-      setSetorModalVisible(false);\n-    }\n-  };\n-\n-  const handleAddNewTurno = () => {\n-    const trimmedInput = novoTurnoInput.trim().toUpperCase();\n-    if (trimmedInput) {\n-      setTurno(trimmedInput);\n-      addCustomItem('@customTurnos', trimmedInput, turnosUnicos, setTurnosUnicos);\n-      setNovoTurnoInput('');\n-      setTurnoModalVisible(false);\n-    }\n-  };\n-\n   return (\n     <KeyboardAvoidingView\n       behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n       style={styles.container}\n@@ -199,10 +136,8 @@\n             <Text style={styles.modalTitle}>Setores</Text>\n             <View style={styles.modalInputContainer}>\n               <TextInput placeholder=\"Adicionar novo setor\" placeholderTextColor=\"#888\" value={novoSetorInput} onChangeText={setNovoSetorInput} style={styles.modalInput} />\n               <TouchableOpacity style={styles.modalAddButton} onPress={() => { if (novoSetorInput.trim()) { setSetor(novoSetorInput.trim()); setNovoSetorInput(''); setSetorModalVisible(false); } }}>\n-              <TextInput placeholder=\"Adicionar novo setor\" placeholderTextColor=\"#888\" value={novoSetorInput} onChangeText={setNovoSetorInput} style={styles.modalInput} onSubmitEditing={handleAddNewSetor} />\n-              <TouchableOpacity style={styles.modalAddButton} onPress={handleAddNewSetor}>\n                 <Ionicons name=\"add-circle\" size={28} color=\"#007bff\" />\n               </TouchableOpacity>\n             </View>\n             <FlatList\n@@ -228,10 +163,8 @@\n             <Text style={styles.modalTitle}>Turnos</Text>\n             <View style={styles.modalInputContainer}>\n               <TextInput placeholder=\"Adicionar novo turno\" placeholderTextColor=\"#888\" value={novoTurnoInput} onChangeText={setNovoTurnoInput} style={styles.modalInput} />\n               <TouchableOpacity style={styles.modalAddButton} onPress={() => { if (novoTurnoInput.trim()) { setTurno(novoTurnoInput.trim().toUpperCase()); setNovoTurnoInput(''); setTurnoModalVisible(false); } }}>\n-              <TextInput placeholder=\"Adicionar novo turno\" placeholderTextColor=\"#888\" value={novoTurnoInput} onChangeText={setNovoTurnoInput} style={styles.modalInput} onSubmitEditing={handleAddNewTurno} />\n-              <TouchableOpacity style={styles.modalAddButton} onPress={handleAddNewTurno}>\n                 <Ionicons name=\"add-circle\" size={28} color=\"#007bff\" />\n               </TouchableOpacity>\n             </View>\n             <FlatList\n"
                },
                {
                    "date": 1760653598116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,8 @@\n   const [novoTurnoInput, setNovoTurnoInput] = useState('');\n \n   const [setoresUnicos, setSetoresUnicos] = useState([]);\n   const [turnosUnicos, setTurnosUnicos] = useState([]);\n-  const baseTurnos = ['A', 'B', 'C', 'X', 'Y', '1', '2', '3'];\n \n   const [alertInfo, setAlertInfo] = useState({ visible: false });\n \n   // Carrega os dados da tela (funcionário para edição e listas de seleção)\n@@ -42,9 +41,9 @@\n       const usedTurnos = allFuncionarios.map(f => f.turno);\n \n       // Combina e remove duplicatas\n       const setores = [...new Set([...customSectors, ...usedSectors].filter(Boolean))].sort();\n-      const turnos = [...new Set([...baseTurnos, ...customTurnos, ...usedTurnos].filter(Boolean))].sort();\n+      const turnos = [...new Set([...customTurnos, ...usedTurnos].filter(Boolean))].sort();\n \n       setSetoresUnicos(setores);\n       setTurnosUnicos(turnos);\n \n"
                }
            ],
            "date": 1760648900267,
            "name": "Commit-0",
            "content": "import CustomAlert from '@/components/alert/Alert';\nimport { addFuncionario, getFuncionarioById, getFuncionarios, updateFuncionario } from '@/sqLite/SQLiteConecction';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport { useEffect, useState } from 'react';\nimport { FlatList, KeyboardAvoidingView, Modal, Platform, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';\n\nexport default function AddEditEmployee() {\n  const navigation = useNavigation();\n  const route = useRoute();\n  const employeeId = route.params?.employeeId;\n\n  const [nome, setNome] = useState('');\n  const [re, setRe] = useState('');\n  const [setor, setSetor] = useState('');\n  const [turno, setTurno] = useState('');\n\n  const [setorModalVisible, setSetorModalVisible] = useState(false);\n  const [turnoModalVisible, setTurnoModalVisible] = useState(false);\n  const [novoSetorInput, setNovoSetorInput] = useState('');\n  const [novoTurnoInput, setNovoTurnoInput] = useState('');\n\n  const [setoresUnicos, setSetoresUnicos] = useState([]);\n  const [turnosUnicos, setTurnosUnicos] = useState([]);\n  const baseTurnos = ['A', 'B', 'C', 'X', 'Y', '1', '2', '3'];\n\n  const [alertInfo, setAlertInfo] = useState({ visible: false });\n\n  useEffect(() => {\n    const loadScreenData = async () => {\n      // Carrega a lista de setores e turnos existentes para os seletores\n      const allFuncionarios = await getFuncionarios();\n      const setores = [...new Set(allFuncionarios.map(f => f.setor).filter(Boolean).sort())];\n      const turnos = [...new Set([...baseTurnos, ...allFuncionarios.map(f => f.turno)].filter(Boolean).sort())];\n      setSetoresUnicos(setores);\n      setTurnosUnicos(turnos);\n\n      // Se for modo de edição, carrega os dados do funcionário\n      if (employeeId) {\n        const funcionario = await getFuncionarioById(employeeId);\n        if (funcionario) {\n          setNome(funcionario.nome);\n          setRe(funcionario.re);\n          setSetor(funcionario.setor);\n          setTurno(funcionario.turno);\n        }\n      }\n    };\n\n    loadScreenData();\n  }, [employeeId]);\n\n  const handleSalvar = async () => {\n    if (!nome || !re || !setor || !turno) {\n      setAlertInfo({\n        visible: true,\n        type: 'warning',\n        title: 'Atenção',\n        message: 'Preencha todos os campos!',\n        buttons: [{ text: 'OK' }],\n      });\n      return;\n    }\n\n    try {\n      if (employeeId) {\n        await updateFuncionario(employeeId, nome, re, setor, turno);\n      } else {\n        await addFuncionario(nome, re, setor, turno);\n      }\n      navigation.goBack();\n    } catch (error) {\n      console.error(error);\n      setAlertInfo({\n        visible: true,\n        type: 'error',\n        title: 'Erro',\n        message: 'Não foi possível salvar o funcionário.',\n        buttons: [{ text: 'OK' }],\n      });\n    }\n  };\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n      style={styles.container}\n    >\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()}>\n          <Ionicons name=\"arrow-back\" size={24} color=\"#333\" />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>{employeeId ? 'Editar Funcionário' : 'Novo Funcionário'}</Text>\n        <View style={{ width: 24 }} />\n      </View>\n\n      <ScrollView style={styles.formContainer}>\n        <Text style={styles.label}>Nome do Funcionário</Text>\n        <TextInput placeholder=\"Digite o nome completo\" placeholderTextColor=\"#888\" value={nome} onChangeText={setNome} style={styles.input} />\n\n        <Text style={styles.label}>RE (Registro)</Text>\n        <TextInput placeholder=\"Digite o RE\" placeholderTextColor=\"#888\" value={re} onChangeText={(text) => setRe(text.replace(/[^0-9]/g, ''))} keyboardType=\"numeric\" style={styles.input} />\n\n        <Text style={styles.label}>Setor</Text>\n        <TouchableOpacity style={styles.selector} onPress={() => setSetorModalVisible(true)}>\n          <Text style={setor ? styles.selectorText : styles.selectorPlaceholder}>\n            {setor || 'Selecione o Setor'}\n          </Text>\n          <Ionicons name=\"chevron-down\" size={20} color=\"#666\" />\n        </TouchableOpacity>\n\n        <Text style={styles.label}>Turno</Text>\n        <TouchableOpacity style={styles.selector} onPress={() => setTurnoModalVisible(true)}>\n          <Text style={turno ? styles.selectorText : styles.selectorPlaceholder}>\n            {turno || 'Selecione o Turno'}\n          </Text>\n          <Ionicons name=\"chevron-down\" size={20} color=\"#666\" />\n        </TouchableOpacity>\n      </ScrollView>\n\n      <View style={styles.footer}>\n        <TouchableOpacity style={[styles.button, styles.btnSave]} onPress={handleSalvar}>\n          <Text style={[styles.buttonText, { color: '#fff' }]}>{employeeId ? 'Salvar Alterações' : 'Adicionar Funcionário'}</Text>\n        </TouchableOpacity>\n      </View>\n\n      {/* Modal de setores */}\n      <Modal visible={setorModalVisible} transparent animationType=\"fade\" onRequestClose={() => setSetorModalVisible(false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            <TouchableOpacity style={styles.modalCloseButton} onPress={() => setSetorModalVisible(false)}>\n              <Ionicons name=\"close\" size={26} color=\"#666\" />\n            </TouchableOpacity>\n            <Text style={styles.modalTitle}>Setores</Text>\n            <View style={styles.modalInputContainer}>\n              <TextInput placeholder=\"Adicionar novo setor\" placeholderTextColor=\"#888\" value={novoSetorInput} onChangeText={setNovoSetorInput} style={styles.modalInput} />\n              <TouchableOpacity style={styles.modalAddButton} onPress={() => { if (novoSetorInput.trim()) { setSetor(novoSetorInput.trim()); setNovoSetorInput(''); setSetorModalVisible(false); } }}>\n                <Ionicons name=\"add-circle\" size={28} color=\"#007bff\" />\n              </TouchableOpacity>\n            </View>\n            <FlatList\n              data={setoresUnicos}\n              keyExtractor={(item, index) => index.toString()}\n              renderItem={({ item }) => (\n                <TouchableOpacity style={styles.modalOption} onPress={() => { setSetor(item); setSetorModalVisible(false); }}>\n                  <Text style={styles.modalOptionText}>{item}</Text>\n                </TouchableOpacity>\n              )}\n            />\n          </View>\n        </View>\n      </Modal>\n\n      {/* Modal de turnos */}\n      <Modal visible={turnoModalVisible} transparent animationType=\"fade\" onRequestClose={() => setTurnoModalVisible(false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            <TouchableOpacity style={styles.modalCloseButton} onPress={() => setTurnoModalVisible(false)}>\n              <Ionicons name=\"close\" size={26} color=\"#666\" />\n            </TouchableOpacity>\n            <Text style={styles.modalTitle}>Turnos</Text>\n            <View style={styles.modalInputContainer}>\n              <TextInput placeholder=\"Adicionar novo turno\" placeholderTextColor=\"#888\" value={novoTurnoInput} onChangeText={setNovoTurnoInput} style={styles.modalInput} />\n              <TouchableOpacity style={styles.modalAddButton} onPress={() => { if (novoTurnoInput.trim()) { setTurno(novoTurnoInput.trim().toUpperCase()); setNovoTurnoInput(''); setTurnoModalVisible(false); } }}>\n                <Ionicons name=\"add-circle\" size={28} color=\"#007bff\" />\n              </TouchableOpacity>\n            </View>\n            <FlatList\n              data={turnosUnicos}\n              keyExtractor={(item) => item}\n              renderItem={({ item }) => (\n                <TouchableOpacity style={styles.modalOption} onPress={() => { setTurno(item); setTurnoModalVisible(false); }}>\n                  <Text style={styles.modalOptionText}>{item}</Text>\n                </TouchableOpacity>\n              )}\n            />\n          </View>\n        </View>\n      </Modal>\n\n      <CustomAlert {...alertInfo} onClose={() => setAlertInfo({ visible: false })} />\n    </KeyboardAvoidingView>\n  );\n}\n\n"
        }
    ]
}