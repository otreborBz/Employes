{
    "sourceFile": "src/screens/newEmployes/AddEditEmployee.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1760568750548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1760568750548,
            "name": "Commit-0",
            "content": "import CustomAlert from '@/components/alert/Alert';\nimport { addFuncionario, getFuncionarioById, getFuncionarios, updateFuncionario } from '@/sqLite/SQLiteConecction';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport { useEffect, useState } from 'react';\nimport { FlatList, KeyboardAvoidingView, Modal, Platform, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';\n\nexport default function AddEditEmployee() {\n  const navigation = useNavigation();\n  const route = useRoute();\n  const employeeId = route.params?.employeeId;\n\n  const [nome, setNome] = useState('');\n  const [re, setRe] = useState('');\n  const [setor, setSetor] = useState('');\n  const [turno, setTurno] = useState('');\n\n  const [setorModalVisible, setSetorModalVisible] = useState(false);\n  const [turnoModalVisible, setTurnoModalVisible] = useState(false);\n  const [novoSetorInput, setNovoSetorInput] = useState('');\n  const [novoTurnoInput, setNovoTurnoInput] = useState('');\n\n  const [setoresUnicos, setSetoresUnicos] = useState([]);\n  const [turnosUnicos, setTurnosUnicos] = useState([]);\n  const baseTurnos = ['A', 'B', 'C', 'X', 'Y', '1', '2', '3'];\n\n  const [alertInfo, setAlertInfo] = useState({ visible: false });\n\n  useEffect(() => {\n    const loadScreenData = async () => {\n      // Carrega a lista de setores e turnos existentes para os seletores\n      const allFuncionarios = await getFuncionarios();\n      const setores = [...new Set(allFuncionarios.map(f => f.setor).filter(Boolean).sort())];\n      const turnos = [...new Set([...baseTurnos, ...allFuncionarios.map(f => f.turno)].filter(Boolean).sort())];\n      setSetoresUnicos(setores);\n      setTurnosUnicos(turnos);\n\n      // Se for modo de edição, carrega os dados do funcionário\n      if (employeeId) {\n        const funcionario = await getFuncionarioById(employeeId);\n        if (funcionario) {\n          setNome(funcionario.nome);\n          setRe(funcionario.re);\n          setSetor(funcionario.setor);\n          setTurno(funcionario.turno);\n        }\n      }\n    };\n\n    loadScreenData();\n  }, [employeeId]);\n\n  const handleSalvar = async () => {\n    if (!nome || !re || !setor || !turno) {\n      setAlertInfo({\n        visible: true,\n        type: 'warning',\n        title: 'Atenção',\n        message: 'Preencha todos os campos!',\n        buttons: [{ text: 'OK' }],\n      });\n      return;\n    }\n\n    try {\n      if (employeeId) {\n        await updateFuncionario(employeeId, nome, re, setor, turno);\n      } else {\n        await addFuncionario(nome, re, setor, turno);\n      }\n      navigation.goBack();\n    } catch (error) {\n      console.error(error);\n      setAlertInfo({\n        visible: true,\n        type: 'error',\n        title: 'Erro',\n        message: 'Não foi possível salvar o funcionário.',\n        buttons: [{ text: 'OK' }],\n      });\n    }\n  };\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n      style={styles.container}\n    >\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()}>\n          <Ionicons name=\"arrow-back\" size={24} color=\"#333\" />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>{employeeId ? 'Editar Funcionário' : 'Novo Funcionário'}</Text>\n        <View style={{ width: 24 }} />\n      </View>\n\n      <ScrollView style={styles.formContainer}>\n        <Text style={styles.label}>Nome do Funcionário</Text>\n        <TextInput placeholder=\"Digite o nome completo\" placeholderTextColor=\"#888\" value={nome} onChangeText={setNome} style={styles.input} />\n\n        <Text style={styles.label}>RE (Registro)</Text>\n        <TextInput placeholder=\"Digite o RE\" placeholderTextColor=\"#888\" value={re} onChangeText={(text) => setRe(text.replace(/[^0-9]/g, ''))} keyboardType=\"numeric\" style={styles.input} />\n\n        <Text style={styles.label}>Setor</Text>\n        <TouchableOpacity style={styles.selector} onPress={() => setSetorModalVisible(true)}>\n          <Text style={setor ? styles.selectorText : styles.selectorPlaceholder}>\n            {setor || 'Selecione o Setor'}\n          </Text>\n          <Ionicons name=\"chevron-down\" size={20} color=\"#666\" />\n        </TouchableOpacity>\n\n        <Text style={styles.label}>Turno</Text>\n        <TouchableOpacity style={styles.selector} onPress={() => setTurnoModalVisible(true)}>\n          <Text style={turno ? styles.selectorText : styles.selectorPlaceholder}>\n            {turno || 'Selecione o Turno'}\n          </Text>\n          <Ionicons name=\"chevron-down\" size={20} color=\"#666\" />\n        </TouchableOpacity>\n      </ScrollView>\n\n      <View style={styles.footer}>\n        <TouchableOpacity style={[styles.button, styles.btnSave]} onPress={handleSalvar}>\n          <Text style={[styles.buttonText, { color: '#fff' }]}>{employeeId ? 'Salvar Alterações' : 'Adicionar Funcionário'}</Text>\n        </TouchableOpacity>\n      </View>\n\n      {/* Modal de setores */}\n      <Modal visible={setorModalVisible} transparent animationType=\"fade\" onRequestClose={() => setSetorModalVisible(false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            <TouchableOpacity style={styles.modalCloseButton} onPress={() => setSetorModalVisible(false)}>\n              <Ionicons name=\"close\" size={26} color=\"#666\" />\n            </TouchableOpacity>\n            <Text style={styles.modalTitle}>Setores</Text>\n            <View style={styles.modalInputContainer}>\n              <TextInput placeholder=\"Adicionar novo setor\" placeholderTextColor=\"#888\" value={novoSetorInput} onChangeText={setNovoSetorInput} style={styles.modalInput} />\n              <TouchableOpacity style={styles.modalAddButton} onPress={() => { if (novoSetorInput.trim()) { setSetor(novoSetorInput.trim()); setNovoSetorInput(''); setSetorModalVisible(false); } }}>\n                <Ionicons name=\"add-circle\" size={28} color=\"#007bff\" />\n              </TouchableOpacity>\n            </View>\n            <FlatList\n              data={setoresUnicos}\n              keyExtractor={(item, index) => index.toString()}\n              renderItem={({ item }) => (\n                <TouchableOpacity style={styles.modalOption} onPress={() => { setSetor(item); setSetorModalVisible(false); }}>\n                  <Text style={styles.modalOptionText}>{item}</Text>\n                </TouchableOpacity>\n              )}\n            />\n          </View>\n        </View>\n      </Modal>\n\n      {/* Modal de turnos */}\n      <Modal visible={turnoModalVisible} transparent animationType=\"fade\" onRequestClose={() => setTurnoModalVisible(false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            <TouchableOpacity style={styles.modalCloseButton} onPress={() => setTurnoModalVisible(false)}>\n              <Ionicons name=\"close\" size={26} color=\"#666\" />\n            </TouchableOpacity>\n            <Text style={styles.modalTitle}>Turnos</Text>\n            <View style={styles.modalInputContainer}>\n              <TextInput placeholder=\"Adicionar novo turno\" placeholderTextColor=\"#888\" value={novoTurnoInput} onChangeText={setNovoTurnoInput} style={styles.modalInput} />\n              <TouchableOpacity style={styles.modalAddButton} onPress={() => { if (novoTurnoInput.trim()) { setTurno(novoTurnoInput.trim().toUpperCase()); setNovoTurnoInput(''); setTurnoModalVisible(false); } }}>\n                <Ionicons name=\"add-circle\" size={28} color=\"#007bff\" />\n              </TouchableOpacity>\n            </View>\n            <FlatList\n              data={turnosUnicos}\n              keyExtractor={(item) => item}\n              renderItem={({ item }) => (\n                <TouchableOpacity style={styles.modalOption} onPress={() => { setTurno(item); setTurnoModalVisible(false); }}>\n                  <Text style={styles.modalOptionText}>{item}</Text>\n                </TouchableOpacity>\n              )}\n            />\n          </View>\n        </View>\n      </Modal>\n\n      <CustomAlert {...alertInfo} onClose={() => setAlertInfo({ visible: false })} />\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: '#f9fafb' },\n  header: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', padding: 15, borderBottomWidth: 1, borderColor: '#eee', backgroundColor: '#fff' },\n  headerTitle: { fontSize: 18, fontWeight: 'bold', color: '#333' },\n  formContainer: { flex: 1, padding: 20 },\n  label: { fontSize: 14, fontWeight: '600', color: '#555', marginBottom: 8 },\n  input: { height: 50, backgroundColor: '#fff', borderWidth: 1, borderColor: '#ddd', borderRadius: 8, paddingHorizontal: 15, fontSize: 16, marginBottom: 20 },\n  selector: { height: 50, backgroundColor: '#fff', borderWidth: 1, borderColor: '#ddd', borderRadius: 8, paddingHorizontal: 15, marginBottom: 20, flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between' },\n  selectorText: { fontSize: 16, color: '#333' },\n  selectorPlaceholder: { fontSize: 16, color: '#888' },\n  footer: { padding: 20, borderTopWidth: 1, borderColor: '#eee', backgroundColor: '#fff' },\n  button: { paddingVertical: 14, borderRadius: 10, alignItems: 'center' },\n  btnSave: { backgroundColor: '#007bff' },\n  buttonText: { fontSize: 16, fontWeight: 'bold' },\n  // Modal Styles\n  modalOverlay: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(0,0,0,0.5)' },\n  modalContent: { backgroundColor: '#fff', width: '90%', borderRadius: 12, padding: 20, maxHeight: '70%' },\n  modalCloseButton: { position: 'absolute', top: 15, right: 15, zIndex: 1 },\n  modalTitle: { fontSize: 20, fontWeight: 'bold', color: '#333', marginBottom: 20, textAlign: 'center' },\n  modalInputContainer: { flexDirection: 'row', alignItems: 'center', marginBottom: 15 },\n  modalInput: { flex: 1, height: 44, backgroundColor: '#f9f9f9', borderWidth: 1, borderColor: '#ddd', borderRadius: 8, padding: 10 },\n  modalAddButton: { marginLeft: 10 },\n  modalOption: { padding: 15, borderBottomWidth: 1, borderBottomColor: '#eee' },\n  modalOptionText: { fontSize: 16, color: '#333' },\n});"
        }
    ]
}