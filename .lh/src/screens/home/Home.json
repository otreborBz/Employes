{
    "sourceFile": "src/screens/home/Home",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1760561802862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1760561802862,
            "name": "Commit-0",
            "content": "import CustomAlert from '@/components/alert/Alert';\nimport { addFuncionario, createTable, getFuncionarios } from '@/sqLite/SQLiteConecction';\nimport { Ionicons } from '@expo/vector-icons';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useIsFocused, useNavigation } from '@react-navigation/native';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useEffect, useState } from 'react';\nimport {\n  FlatList,\n  Keyboard,\n  KeyboardAvoidingView,\n  Linking,\n  Modal,\n  Platform,\n  ScrollView,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View\n} from 'react-native';\nimport styles from './styles';\n\nexport default function Home() {\n  const navigation = useNavigation();\n  const isFocused = useIsFocused();\n\n  const [funcionarios, setFuncionarios] = useState([]);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [newEmployee, setNewEmployee] = useState({ nome: '', re: '', setor: '' });\n  const [setorModalVisible, setSetorModalVisible] = useState(false);\n  const [novoSetorInput, setNovoSetorInput] = useState('');\n  const [viewSetoresModal, setViewSetoresModal] = useState(false);\n  const [viewEmployeeModal, setViewEmployeeModal] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [userName, setUserName] = useState('');\n  const [nameModalVisible, setNameModalVisible] = useState(false);\n  const [inputName, setInputName] = useState('');\n  const [alertInfo, setAlertInfo] = useState({ visible: false });\n\n  const loadData = async () => {\n    try {\n      await createTable(); // Garante que a tabela exista antes de ler\n      const data = await getFuncionarios();\n      setFuncionarios(data);\n    } catch (error) {\n      console.error(\"Erro ao carregar dados:\", error);\n      setAlertInfo({\n        visible: true,\n        type: 'error',\n        title: 'Erro',\n        message: 'NÃ£o foi possÃ­vel carregar os funcionÃ¡rios.',\n        buttons: [{ text: 'OK' }],\n      });\n    }\n  };\n\n  useEffect(() => {\n    const checkUserName = async () => {\n      try {\n        const storedName = await AsyncStorage.getItem('@userName');\n        if (storedName) {\n          setUserName(storedName);\n        } else {\n          setNameModalVisible(true); // Pede o nome se nÃ£o houver\n        }\n      } catch (e) { console.error(\"Erro ao ler nome do usuÃ¡rio\", e); }\n    };\n    checkUserName();\n  }, []);\n\n  useEffect(() => {\n    if (isFocused) loadData();\n  }, [isFocused]);\n\n  const total = funcionarios.length;\n  const setores = [...new Set(funcionarios.map(f => f.setor))];\n  const ultimos = funcionarios.slice(-3).reverse();\n  const ultimoFuncionario = funcionarios.length > 0 ? funcionarios[funcionarios.length - 1] : null;\n\n  const handleAdd = async () => {\n    if (!newEmployee.nome || !newEmployee.re || !newEmployee.setor) {\n      setAlertInfo({\n        visible: true,\n        type: 'warning',\n        title: 'AtenÃ§Ã£o',\n        message: 'Por favor, preencha todos os campos.',\n        buttons: [{ text: 'OK' }],\n      });\n      return;\n    }\n\n    try {\n      await addFuncionario(newEmployee.nome, newEmployee.re, newEmployee.setor);\n      setNewEmployee({ nome: '', re: '', setor: '' });\n      setModalVisible(false);\n      Keyboard.dismiss();\n      await loadData();\n      setAlertInfo({\n        visible: true,\n        type: 'success',\n        title: 'Sucesso!',\n        message: 'FuncionÃ¡rio adicionado com sucesso.',\n        buttons: [{ text: 'OK' }],\n      });\n    } catch (error) {\n      console.error(\"Erro ao adicionar funcionÃ¡rio:\", error);\n      setAlertInfo({\n        visible: true,\n        type: 'error',\n        title: 'Erro',\n        message: 'NÃ£o foi possÃ­vel salvar o funcionÃ¡rio.',\n        buttons: [{ text: 'OK' }],\n      });\n    }\n  };\n\n  const handleSaveName = async () => {\n    if (inputName.trim()) {\n      try {\n        await AsyncStorage.setItem('@userName', inputName.trim().toUpperCase());\n        setUserName(inputName.trim());\n        setInputName('');\n        setNameModalVisible(false);\n      } catch (e) { console.error(\"Erro ao salvar nome do usuÃ¡rio\", e); }\n    } else {\n      setAlertInfo({\n        visible: true,\n        type: 'warning',\n        title: 'AtenÃ§Ã£o',\n        message: 'Por favor, digite seu nome.',\n        buttons: [{ text: 'OK' }],\n      });\n    }\n  };\n\n  const handleDeleteSetor = async (setorParaDeletar) => {\n    const isSetorInUse = funcionarios.some(f => f.setor === setorParaDeletar);\n\n    if (isSetorInUse) {\n      setAlertInfo({\n        visible: true,\n        type: 'warning',\n        title: 'AÃ§Ã£o Bloqueada',\n        message: `O setor \"${setorParaDeletar}\" estÃ¡ em uso e nÃ£o pode ser excluÃ­do.`,\n        buttons: [{ text: 'Entendi' }],\n      });\n      return;\n    }\n\n    setAlertInfo({\n      visible: true,\n      type: 'confirm',\n      title: 'Excluir Setor',\n      message: `O setor \"${setorParaDeletar}\" nÃ£o estÃ¡ associado a nenhum funcionÃ¡rio. Deseja removÃª-lo da lista?`,\n      buttons: [\n        { text: 'Cancelar', style: 'cancel' },\n        {\n          text: 'Remover', style: 'destructive', onPress: () => {\n            setSetorModalVisible(false);\n          }\n        },\n      ],\n    });\n  };\n\n  const handleAddNovoSetor = () => {\n    if (novoSetorInput.trim()) {\n      setNewEmployee({ ...newEmployee, setor: novoSetorInput.trim() });\n      setNovoSetorInput('');\n      setSetorModalVisible(false);\n    }\n  };\n\n  const handleShare = async (item) => {\n    if (!item) return;\n    const message = `*Detalhes do FuncionÃ¡rio*\\n\\n*Nome:* ${item.nome}\\n*RE:* ${item.re}\\n*Setor:* ${item.setor}`;\n    const url = `whatsapp://send?text=${encodeURIComponent(message)}`;\n\n    try {\n      const supported = await Linking.canOpenURL(url);\n      if (supported) {\n        await Linking.openURL(url);\n      } else {\n        setAlertInfo({ visible: true, type: 'error', title: 'Erro', message: 'WhatsApp nÃ£o estÃ¡ instalado no seu dispositivo.', buttons: [{ text: 'OK' }] });\n      }\n    } catch (error) {\n      console.error(\"Erro ao abrir WhatsApp:\", error);\n      setAlertInfo({ visible: true, type: 'error', title: 'Erro', message: 'NÃ£o foi possÃ­vel abrir o WhatsApp.', buttons: [{ text: 'OK' }] });\n    }\n  };\n\n  return (\n    <LinearGradient colors={['#F5F9FF', '#FFFFFF']} style={styles.container}>\n      <View style={styles.container}>\n        <ScrollView contentContainerStyle={styles.scrollContainer} showsVerticalScrollIndicator={false}>\n          <View style={styles.greetingContainer}>\n            <Text style={styles.greeting}>ðŸ‘‹ OlÃ¡, {userName.toUpperCase() || 'bem-vindo'}!</Text>\n            {userName ? (\n              <TouchableOpacity onPress={() => {\n                setInputName(userName); // Preenche o modal com o nome atual\n                setNameModalVisible(true);\n              }}>\n                <Ionicons name=\"create-outline\" size={24} color=\"#555\" />\n              </TouchableOpacity>\n            ) : null}\n          </View>\n\n          {/* ðŸ”¹ SeÃ§Ã£o de visÃ£o geral */}\n          <Text style={styles.sectionTitle}>ðŸ“Š VisÃ£o Geral</Text>\n          <View style={styles.cardsContainer}>\n            <TouchableOpacity style={styles.card} onPress={() => navigation.navigate('Employes')}>\n              <Ionicons name=\"people-outline\" size={24} color=\"#007BFF\" />\n              <Text style={styles.cardTitle}>FuncionÃ¡rios</Text>\n              <Text style={styles.cardNumber}>{total}</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.card} onPress={() => setViewSetoresModal(true)}>\n              <Ionicons name=\"business-outline\" size={24} color=\"#28A745\" />\n              <Text style={styles.cardTitle}>Setores</Text>\n              <Text style={styles.cardNumber}>{setores.length}</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.card}\n              disabled={!ultimoFuncionario}\n              onPress={() => {\n                setSelectedEmployee(ultimoFuncionario);\n                setViewEmployeeModal(true);\n              }}\n            >\n              <Ionicons name=\"time-outline\" size={24} color=\"#FFC107\" />\n              <Text style={styles.cardTitle}>Ãšltimo cadastrado</Text>\n              <Text style={styles.cardSmall} numberOfLines={2} ellipsizeMode=\"tail\">\n                {ultimoFuncionario ? ultimoFuncionario.nome.split(' ')[0] : 'â€”'}\n              </Text>\n            </TouchableOpacity>\n          </View>\n\n          {/* ðŸ”¹ Ãšltimos adicionados */}\n          <Text style={styles.sectionTitle}>ðŸ•’ Ãšltimos adicionados</Text>\n          {ultimos.length > 0 ? (\n            ultimos.map(item => (\n              <View key={item.id.toString()} style={styles.listItem}>\n                <Ionicons name=\"person-circle-outline\" size={26} color=\"#007BFF\" />\n                <View style={{ marginLeft: 10 }}>\n                  <Text style={styles.listItemName}>{item.nome}</Text>\n                  <Text style={styles.listItemDetails}>RE: {item.re} | {item.setor}</Text>\n                </View>\n              </View>\n            ))\n          ) : (\n            <Text style={styles.emptyText}>Nenhum funcionÃ¡rio cadastrado.</Text>\n          )}\n        </ScrollView>\n      </View>\n\n      {/* ðŸ”¹ Modal de cadastro com KeyboardAvoidingView */}\n      <Modal visible={modalVisible} animationType=\"slide\" transparent={true} onRequestClose={() => setModalVisible(false)}>\n        <KeyboardAvoidingView\n          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n          style={styles.modalContainer}\n        >\n          <View style={styles.modalView}>\n            <TouchableOpacity onPress={() => setModalVisible(false)} style={styles.closeButton}>\n              <Ionicons name=\"close\" size={26} color=\"#666\" />\n            </TouchableOpacity>\n            <Text style={styles.modalTitle}>Adicionar FuncionÃ¡rio</Text>\n\n            <View style={styles.inputContainer}>\n              <Ionicons name=\"person-outline\" size={20} color=\"#999\" style={styles.inputIcon} />\n              <TextInput\n                placeholder=\"Nome do funcionÃ¡rio\"\n                placeholderTextColor=\"#888\"\n                value={newEmployee.nome}\n                onChangeText={text => setNewEmployee({ ...newEmployee, nome: text })}\n                style={styles.modalInput}\n              />\n            </View>\n            <View style={styles.inputContainer}>\n              <Ionicons name=\"card-outline\" size={20} color=\"#999\" style={styles.inputIcon} />\n              <TextInput\n                placeholder=\"RE (Registro)\"\n                placeholderTextColor=\"#888\"\n                value={newEmployee.re}\n                onChangeText={text => setNewEmployee({ ...newEmployee, re: text.replace(/[^0-9]/g, '') })}\n                style={styles.modalInput}\n                keyboardType=\"numeric\"\n              />\n            </View>\n            {/* BotÃ£o para abrir modal de setor */}\n            <TouchableOpacity style={[styles.inputContainer, styles.selectorButton]} onPress={() => setSetorModalVisible(true)}>\n              <Text style={newEmployee.setor ? styles.inputText : styles.placeholderText}>\n                {newEmployee.setor || 'Selecione o Setor'}\n              </Text>\n              <Ionicons name=\"chevron-down\" size={20} color=\"#666\" />\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.modalButton} onPress={handleAdd}>\n              <Ionicons name=\"save-outline\" size={20} color=\"#fff\" style={{ marginRight: 6 }} />\n              <Text style={styles.modalButtonText}>Salvar</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity onPress={() => setModalVisible(false)} style={styles.cancelButton}>\n              <Text style={styles.cancelText}>Cancelar</Text>\n            </TouchableOpacity>\n          </View>\n        </KeyboardAvoidingView>\n      </Modal>\n\n      {/* Modal de SeleÃ§Ã£o de Setor para a Home */}\n      <Modal\n        visible={setorModalVisible}\n        transparent\n        animationType=\"fade\"\n        onRequestClose={() => setSetorModalVisible(false)}\n      >\n        <View style={styles.modalContainer}>\n          <View style={styles.modalView}>\n            <TouchableOpacity onPress={() => setSetorModalVisible(false)} style={styles.closeButton}>\n              <Ionicons name=\"close\" size={26} color=\"#666\" />\n            </TouchableOpacity>\n            <Text style={styles.modalTitle}>Setores</Text>\n\n            {/* Input para adicionar novo setor */}\n            <View style={styles.setorInputContainer}>\n              <TextInput\n                placeholder=\"Adicionar novo setor\"\n                placeholderTextColor=\"#888\"\n                value={novoSetorInput}\n                onChangeText={setNovoSetorInput}\n                style={styles.setorInput}\n              />\n              <TouchableOpacity style={styles.addSetorButton} onPress={handleAddNovoSetor}>\n                <Ionicons name=\"add-circle\" size={28} color=\"#007bff\" />\n              </TouchableOpacity>\n            </View>\n\n            {/* Lista de setores existentes */}\n            <FlatList\n              data={setores}\n              keyExtractor={(item, index) => index.toString()}\n              renderItem={({ item }) => (\n                <View style={styles.setorOption}>\n                  <TouchableOpacity style={{ flex: 1 }} onPress={() => { setNewEmployee({ ...newEmployee, setor: item }); setSetorModalVisible(false); }}>\n                    <Text style={styles.setorOptionText}>{item}</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity onPress={() => handleDeleteSetor(item)}>\n                    <Ionicons name=\"trash-outline\" size={22} color=\"#dc3545\" />\n                  </TouchableOpacity>\n                </View>\n              )}\n              ListEmptyComponent={<Text style={styles.emptyText}>Nenhum setor cadastrado.</Text>}\n              style={{ width: '100%' }}\n            />\n            <TouchableOpacity onPress={() => setSetorModalVisible(false)} style={styles.cancelButton}><Text style={styles.cancelText}>Fechar</Text></TouchableOpacity>\n          </View>\n        </View>\n      </Modal>\n\n      {/* Modal para Visualizar Setores */}\n      <Modal\n        visible={viewSetoresModal}\n        transparent\n        animationType=\"fade\"\n        onRequestClose={() => setViewSetoresModal(false)}\n      >\n        <View style={styles.modalContainer}>\n          <View style={styles.modalView}>\n            <TouchableOpacity onPress={() => setViewSetoresModal(false)} style={styles.closeButton}>\n              <Ionicons name=\"close\" size={26} color=\"#666\" />\n            </TouchableOpacity>\n            <Text style={styles.modalTitle}>Setores Cadastrados</Text>\n            <FlatList\n              data={setores}\n              keyExtractor={(item, index) => index.toString()}\n              renderItem={({ item }) => (\n                <View style={styles.setorOption}>\n                  <Ionicons name=\"business-outline\" size={20} color=\"#007BFF\" style={{ marginRight: 10 }} />\n                  <Text style={styles.setorOptionText}>{item}</Text>\n                </View>\n              )}\n              ListEmptyComponent={<Text style={styles.emptyText}>Nenhum setor cadastrado.</Text>}\n              style={{ width: '100%' }}\n            />\n            <TouchableOpacity onPress={() => setViewSetoresModal(false)} style={styles.cancelButton}><Text style={styles.cancelText}>Fechar</Text></TouchableOpacity>\n          </View>\n        </View>\n      </Modal>\n\n      {/* Modal para Visualizar Ãšltimo FuncionÃ¡rio */}\n      {selectedEmployee && (\n        <Modal\n          visible={viewEmployeeModal}\n          transparent\n          animationType=\"fade\"\n          onRequestClose={() => setViewEmployeeModal(false)}\n        >\n          <View style={styles.modalContainer}>\n            <View style={styles.modalView}>\n              <TouchableOpacity onPress={() => setViewEmployeeModal(false)} style={styles.closeButton}>\n                <Ionicons name=\"close\" size={26} color=\"#666\" />\n              </TouchableOpacity>\n              <Text style={styles.modalTitle}>Detalhes do FuncionÃ¡rio</Text>\n\n              <View style={styles.detailsContainer}>\n                <View style={styles.detailRow}>\n                  <Ionicons name=\"person-circle-outline\" size={26} color=\"#007BFF\" style={styles.detailIcon} />\n                  <View>\n                    <Text style={styles.detailLabel}>Nome</Text>\n                    <Text style={styles.detailValue}>{selectedEmployee.nome}</Text>\n                  </View>\n                </View>\n                <View style={styles.detailRow}>\n                  <Ionicons name=\"card-outline\" size={26} color=\"#007BFF\" style={styles.detailIcon} />\n                  <View>\n                    <Text style={styles.detailLabel}>RE</Text>\n                    <Text style={styles.detailValue}>{selectedEmployee.re}</Text>\n                  </View>\n                </View>\n                <View style={styles.detailRow}>\n                  <Ionicons name=\"business-outline\" size={26} color=\"#007BFF\" style={styles.detailIcon} />\n                  <View>\n                    <Text style={styles.detailLabel}>Setor</Text>\n                    <Text style={styles.detailValue}>{selectedEmployee.setor}</Text>\n                  </View>\n                </View>\n              </View>\n\n              <TouchableOpacity style={[styles.modalButton, { backgroundColor: '#25D366' }]} onPress={() => handleShare(selectedEmployee)}>\n                <Ionicons name=\"logo-whatsapp\" size={20} color=\"#fff\" style={{ marginRight: 8 }} />\n                <Text style={styles.modalButtonText}>Compartilhar</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </Modal>\n      )}\n\n      {/* Modal para pedir o nome do usuÃ¡rio */}\n      <Modal\n        visible={nameModalVisible}\n        transparent\n        animationType=\"fade\"\n        onRequestClose={() => { /* Impede o fechamento pelo botÃ£o de voltar */ }}\n      >\n        <View style={styles.modalContainer}>\n          <View style={styles.modalView}>\n            <Text style={styles.modalTitle}>Bem-vindo(a)!</Text>\n            <Text style={{ color: '#555', textAlign: 'center', marginBottom: 20 }}>Para comeÃ§ar, como podemos te chamar?</Text>\n            <View style={styles.inputContainer}>\n              <Ionicons name=\"person-outline\" size={20} color=\"#999\" style={styles.inputIcon} />\n              <TextInput\n                placeholder=\"Digite seu nome\"\n                placeholderTextColor=\"#888\"\n                value={inputName}\n                onChangeText={setInputName}\n                style={styles.modalInput}\n              />\n            </View>\n            <TouchableOpacity style={styles.modalButton} onPress={handleSaveName}><Text style={styles.modalButtonText}>Salvar</Text></TouchableOpacity>\n          </View>\n        </View>\n      </Modal>\n\n      <CustomAlert {...alertInfo} onClose={() => setAlertInfo({ visible: false })} />\n    </LinearGradient>\n  );\n}\n"
        }
    ]
}